From 972e9bf0965d6c766c15b00d552b2cedd567d25c Mon Sep 17 00:00:00 2001
From: Jaedon Shin <jaedon.shin@gmail.com>
Date: Fri, 19 Jun 2020 14:37:50 +0900
Subject: [PATCH] Add initial support for V4L2 mem2mem decoder

---
 .../media/filters/ffmpeg_video_decoder.cc     | 98 ++++++++++++++++++-
 chromium/media/filters/ffmpeg_video_decoder.h |  2 +
 2 files changed, 97 insertions(+), 3 deletions(-)

diff --git a/chromium/media/filters/ffmpeg_video_decoder.cc b/chromium/media/filters/ffmpeg_video_decoder.cc
index 21ccdda5ed64..4a4fba3580c2 100644
--- a/chromium/media/filters/ffmpeg_video_decoder.cc	2024-09-20 08:16:35.408653705 +0000
+++ b/chromium/media/filters/ffmpeg_video_decoder.cc	2024-09-20 08:26:38.970489310 +0000
@@ -86,7 +86,7 @@
 }
 
 FFmpegVideoDecoder::FFmpegVideoDecoder(MediaLog* media_log)
-    : media_log_(media_log), state_(kUninitialized), decode_nalus_(false) {
+    : media_log_(media_log), state_(kUninitialized), decode_nalus_(false), decoder_v4l2m2m_(false) {
   DVLOG(1) << __func__;
   thread_checker_.DetachFromThread();
 }
@@ -355,13 +355,80 @@
     DLOG(ERROR) << "Video frame was produced yet has invalid frame data.";
     return false;
   }
+  if (decoder_v4l2m2m_) {
+    const VideoPixelFormat format =
+        AVPixelFormatToVideoPixelFormat(codec_context_->pix_fmt);
+
+    gfx::Size size(frame->width, frame->height);
+    const int ret = av_image_check_size(size.width(), size.height(), 0, NULL);
+    if (ret < 0)
+      return false;
+
+    gfx::Size natural_size;
+    if (codec_context_->sample_aspect_ratio.num > 0) {
+      natural_size = GetNaturalSize(size,
+                                    codec_context_->sample_aspect_ratio.num,
+                                    codec_context_->sample_aspect_ratio.den);
+    } else {
+      natural_size =
+          GetNaturalSize(gfx::Rect(size), config_.GetPixelAspectRatio());
+    }
+
+    scoped_refptr<VideoFrame> external_frame = VideoFrame::WrapExternalYuvData(
+        format, size, gfx::Rect(size), natural_size,
+        frame->linesize[VideoFrame::kYPlane],
+        frame->linesize[VideoFrame::kUPlane],
+        frame->linesize[VideoFrame::kVPlane],
+        frame->data[VideoFrame::kYPlane],
+        frame->data[VideoFrame::kUPlane],
+        frame->data[VideoFrame::kVPlane],
+        kNoTimestamp);
+
+    scoped_refptr<VideoFrame> video_frame = frame_pool_.CreateFrame(
+      format, size, gfx::Rect(size), natural_size, kNoTimestamp);
+
+    if (!video_frame)
+      return false;
 
+    if (!I420CopyWithPadding(*external_frame, video_frame.get()))
+      return false;
+
+    VideoColorSpace color_space = AVColorSpaceToColorSpace(
+        codec_context_->colorspace, codec_context_->color_range);
+    if (!color_space.IsSpecified())
+      color_space = config_.color_space_info();
+    video_frame->set_color_space(color_space.ToGfxColorSpace());
+
+    if (codec_context_->codec_id == AV_CODEC_ID_VP8 &&
+        codec_context_->color_primaries == AVCOL_PRI_UNSPECIFIED &&
+        codec_context_->color_trc == AVCOL_TRC_UNSPECIFIED &&
+        codec_context_->colorspace == AVCOL_SPC_BT470BG) {
+      if (codec_context_->color_range == AVCOL_RANGE_JPEG) {
+        video_frame->set_color_space(gfx::ColorSpace::CreateJpeg());
+      }
+    } else if (codec_context_->color_primaries != AVCOL_PRI_UNSPECIFIED ||
+              codec_context_->color_trc != AVCOL_TRC_UNSPECIFIED ||
+              codec_context_->colorspace != AVCOL_SPC_UNSPECIFIED) {
+      media::VideoColorSpace video_color_space = media::VideoColorSpace(
+          codec_context_->color_primaries, codec_context_->color_trc,
+          codec_context_->colorspace,
+          codec_context_->color_range != AVCOL_RANGE_MPEG
+              ? gfx::ColorSpace::RangeID::FULL
+              : gfx::ColorSpace::RangeID::LIMITED);
+      video_frame->set_color_space(video_color_space.ToGfxColorSpace());
+    }
+
+    //video_frame->set_timestamp(base::TimeDelta::FromMicroseconds(frame->pts));
+    video_frame->metadata()->power_efficient = false;
+    output_cb_.Run(video_frame);
+  } else {
   scoped_refptr<VideoFrame> video_frame =
       reinterpret_cast<VideoFrame*>(av_buffer_get_opaque(frame->buf[0]));
 //  video_frame->set_timestamp(
 //      base::TimeDelta::FromMicroseconds(frame->reordered_opaque));
   video_frame->metadata()->power_efficient = false;
   output_cb_.Run(video_frame);
+  }
   return true;
 }
 
@@ -391,7 +458,25 @@
   if (decode_nalus_)
     codec_context_->flags2 |= AV_CODEC_FLAG2_CHUNKS;
 
-  const AVCodec* codec = avcodec_find_decoder(codec_context_->codec_id);
+  const AVCodec* codec = NULL;
+  if (codec_context_->codec_id == AV_CODEC_ID_H264)
+    codec = avcodec_find_decoder_by_name("h264_v4l2m2m");
+  else if (codec_context_->codec_id == AV_CODEC_ID_VP9)
+    codec = avcodec_find_decoder_by_name("vp9_v4l2m2m");
+  else if (codec_context_->codec_id == AV_CODEC_ID_HEVC)
+    codec = avcodec_find_decoder_by_name("hevc_v4l2m2m");
+  if (codec) {
+    decoder_v4l2m2m_ = true;
+    codec_context_->thread_count = 1;
+    codec_context_->thread_type = FF_THREAD_SLICE | FF_THREAD_FRAME;
+    codec_context_->get_buffer2 = NULL;
+    codec_context_->time_base.num = 1;
+    codec_context_->time_base.den = base::Time::kMicrosecondsPerSecond;
+    codec_context_->pkt_timebase.num = 1;
+    codec_context_->pkt_timebase.den = base::Time::kMicrosecondsPerSecond;
+  }
+  if (!codec)
+    codec = avcodec_find_decoder(codec_context_->codec_id);
   if (!codec || avcodec_open2(codec_context_.get(), codec, NULL) < 0) {
     ReleaseFFmpegResources();
     return false;
diff --git a/chromium/media/filters/ffmpeg_video_decoder.h b/chromium/media/filters/ffmpeg_video_decoder.h
index f13ce417f8bc..b69257fad864 100644
--- a/chromium/media/filters/ffmpeg_video_decoder.h
+++ b/chromium/media/filters/ffmpeg_video_decoder.h
@@ -91,6 +91,8 @@ class MEDIA_EXPORT FFmpegVideoDecoder : public VideoDecoder {
 
   bool decode_nalus_;
 
+  bool decoder_v4l2m2m_;
+
   std::unique_ptr<FFmpegDecodingLoop> decoding_loop_;
 
   DISALLOW_COPY_AND_ASSIGN(FFmpegVideoDecoder);
-- 
2.30.1

